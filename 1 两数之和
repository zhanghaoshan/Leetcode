1暴力解法,时间复杂度：o(n2)

int* twoSum(int* nums, int numsSize, int target) {     
    int tem=0;
    static int result[2];
    for (int i=0;i<numsSize-1;i++){
        tem=target-nums[i];
        for(int j=i+1;j<numsSize;j++)
            if (nums[j]==tem){
                  result[0]=i,result[1]=j;
                  return result;
            }
    }
    return 0;
}

2两遍哈希表,时间复杂度o(n)
所用的哈希函数很简单，因为nums中没有重复数据，所以h(key)=key-min,这里甚至可以直接h(key)=key也可以。
int* twoSum(int* nums, int numsSize, int target) {  
    int* result=(int*) malloc(sizeof(int)*2);
    int min=INT_MAX,max=INT_MIN;
    for (int i=0;i<numsSize;i++){
        if (nums[i]<min)
            min=nums[i];
        if (nums[i]>max)
            max=nums[i];
    }
    int len=max-min+1;
    int* hash=(int*) malloc(sizeof(int)*len);
    for (int i=0;i<len;i++)
        hash[i]=-1;
    for (int i=0;i<numsSize;i++){
        hash[nums[i]-min]=i;
    }
    for (int i=0;i<numsSize;i++){
        int dif=target-nums[i]-min;
        if (dif>=0 && dif<=max-min && hash[dif]!=-1){
            result[0]=i,result[1]=hash[dif];
            return result;
        }  
    }
    return NULL;
}

        
